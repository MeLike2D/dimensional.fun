generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String      @id @unique
  views     Int        @default(1)
  comments  Comment[]

  @@map("posts")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())

  email         String?   @unique
  emailVerified DateTime? @map("email_verified")

  name          String?
  bio           String  @default("A random person who decided to sign up")
  pronouns      String?
  image         String?
  
  accounts      Account[]
  sessions      Session[]

  comments      Comment[]
  reacts        CommentReaction[]

  @@map("users")
}

model Comment {
  id         String   @id @default(cuid())
  content    String 
  createdAt  DateTime @default(now())

  author     User              @relation(fields: [userId], references: [id])
  post       Post              @relation(fields: [postId], references: [id])
  reactions  CommentReaction[] 
  
  postId  String  @map("post_id")
  userId  String  @map("user_id")     
  
  @@map("comments")
}

model CommentReaction {
  id        String     @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  userId    String     
  commentId String

  @@unique([emoji, commentId, userId])
  @@map("comment_reactions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

